"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const rescue = function rescue(callback) {
    return function rescuehandler(...args) {
        return __awaiter(this, void 0, void 0, function* () {
            const next = args.slice(-1).pop();
            if (typeof next !== 'function') {
                throw new TypeError('The last parameter received by express-rescue is not a function. Are you sure you passed its return as a middleware?');
            }
            try {
                yield callback(...args); // eslint-disable-line
            }
            catch (err) {
                next(err);
            }
        });
    };
};
rescue.from = function rescuefrom(constructor, callback) {
    return function errorhandler(err, req, res, next) {
        if (!(err instanceof constructor)) {
            next(err);
            return;
        }
        callback(err, req, res, next);
    };
};
rescue.all = function rescueall(callbacks) {
    return callbacks.map(rescue);
};
exports.default = rescue;
module.exports = rescue;
